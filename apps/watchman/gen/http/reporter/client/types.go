// Code generated by goa v3.2.6, DO NOT EDIT.
//
// reporter HTTP client types
//
// Command:
// $ goa gen github.com/lbryio/lbrytv/apps/watchman/design -o apps/watchman

package client

import (
	reporter "github.com/lbryio/lbrytv/apps/watchman/gen/reporter"
)

// AddRequestBody is the type of the "reporter" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// LBRY URL
	URL string `form:"url" json:"url" xml:"url"`
	// Current playback report stream position, ms
	Pos int32 `form:"pos" json:"pos" xml:"pos"`
	// Relative stream position, 0 — 10000 (0% — 100%)
	Por int32 `form:"por" json:"por" xml:"por"`
	// Current playback report duration, ms
	Dur int32 `form:"dur" json:"dur" xml:"dur"`
	// Buffering events count
	Bfc int32 `form:"bfc" json:"bfc" xml:"bfc"`
	// Buffering events total duration, ms
	Bfd int32 `form:"bfd" json:"bfd" xml:"bfd"`
	// Video format
	Fmt string `form:"fmt" json:"fmt" xml:"fmt"`
	// Player server name
	Pid string `form:"pid" json:"pid" xml:"pid"`
	// Client download rate, bits/s
	Crt *int32 `form:"crt,omitempty" json:"crt,omitempty" xml:"crt,omitempty"`
	// Client area
	Car *string `form:"car,omitempty" json:"car,omitempty" xml:"car,omitempty"`
	// Unique client ID
	Cid string `form:"cid" json:"cid" xml:"cid"`
	// Client device
	Cdv string `form:"cdv" json:"cdv" xml:"cdv"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "reporter" service.
func NewAddRequestBody(p *reporter.PlaybackReport) *AddRequestBody {
	body := &AddRequestBody{
		URL: p.URL,
		Pos: p.Pos,
		Por: p.Por,
		Dur: p.Dur,
		Bfc: p.Bfc,
		Bfd: p.Bfd,
		Fmt: p.Fmt,
		Pid: p.Pid,
		Crt: p.Crt,
		Car: p.Car,
		Cid: p.Cid,
		Cdv: p.Cdv,
	}
	return body
}
