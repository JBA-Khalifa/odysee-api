// Code generated by goa v3.4.2, DO NOT EDIT.
//
// reporter HTTP client types
//
// Command:
// $ goa gen github.com/lbryio/lbrytv/apps/watchman/design -o apps/watchman

package client

import (
	reporter "github.com/lbryio/lbrytv/apps/watchman/gen/reporter"
)

// AddRequestBody is the type of the "reporter" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// LBRY URL
	URL string `form:"url" json:"url" xml:"url"`
	// Current playback report stream position, ms
	Position int32 `form:"position" json:"position" xml:"position"`
	// Relative stream position, pct, 0â€”100
	RelPosition int32 `form:"rel_position" json:"rel_position" xml:"rel_position"`
	// Buffering events count
	BufCount int32 `form:"buf_count" json:"buf_count" xml:"buf_count"`
	// Buffering events total duration, ms
	BufDuration int32 `form:"buf_duration" json:"buf_duration" xml:"buf_duration"`
	// Video format
	Format string `form:"format" json:"format" xml:"format"`
	// Player server name
	Player string `form:"player" json:"player" xml:"player"`
	// Unique client ID
	Client string `form:"client" json:"client" xml:"client"`
	// Client download rate, bit/s
	ClientRate *int32 `form:"client_rate,omitempty" json:"client_rate,omitempty" xml:"client_rate,omitempty"`
	// Client device
	Device string `form:"device" json:"device" xml:"device"`
	// Timestamp
	T *string `form:"t,omitempty" json:"t,omitempty" xml:"t,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "reporter" service.
func NewAddRequestBody(p *reporter.PlaybackReport) *AddRequestBody {
	body := &AddRequestBody{
		URL:         p.URL,
		Position:    p.Position,
		RelPosition: p.RelPosition,
		BufCount:    p.BufCount,
		BufDuration: p.BufDuration,
		Format:      p.Format,
		Player:      p.Player,
		Client:      p.Client,
		ClientRate:  p.ClientRate,
		Device:      p.Device,
		T:           p.T,
	}
	return body
}
