// Code generated by goa v3.4.3, DO NOT EDIT.
//
// reporter HTTP client types
//
// Command:
// $ goa gen github.com/lbryio/lbrytv/apps/watchman/design -o apps/watchman

package client

import (
	reporter "github.com/lbryio/lbrytv/apps/watchman/gen/reporter"
)

// AddRequestBody is the type of the "reporter" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// LBRY URL
	URL string `form:"url" json:"url" xml:"url"`
	// Event duration, ms
	Duration int32 `form:"duration" json:"duration" xml:"duration"`
	// Current playback report stream position, ms
	Position int32 `form:"position" json:"position" xml:"position"`
	// Relative stream position, pct, 0â€”100
	RelPosition int32 `form:"rel_position" json:"rel_position" xml:"rel_position"`
	// Rebuffering events count
	RebufCount int32 `form:"rebuf_count" json:"rebuf_count" xml:"rebuf_count"`
	// Rebuffering events duration, ms
	RebufDuration int32 `form:"rebuf_duration" json:"rebuf_duration" xml:"rebuf_duration"`
	// Video delivery protocol, stb (binary stream) or HLS
	Protocol string `form:"protocol" json:"protocol" xml:"protocol"`
	// Cache status of video
	Cache *string `form:"cache,omitempty" json:"cache,omitempty" xml:"cache,omitempty"`
	// Player server name
	Player string `form:"player" json:"player" xml:"player"`
	// User ID
	UserID int32 `form:"user_id" json:"user_id" xml:"user_id"`
	// Client bandwidth, bit/s
	Bandwidth *int32 `form:"bandwidth,omitempty" json:"bandwidth,omitempty" xml:"bandwidth,omitempty"`
	// Client device
	Device string `form:"device" json:"device" xml:"device"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "reporter" service.
func NewAddRequestBody(p *reporter.PlaybackReport) *AddRequestBody {
	body := &AddRequestBody{
		URL:           p.URL,
		Duration:      p.Duration,
		Position:      p.Position,
		RelPosition:   p.RelPosition,
		RebufCount:    p.RebufCount,
		RebufDuration: p.RebufDuration,
		Protocol:      p.Protocol,
		Cache:         p.Cache,
		Player:        p.Player,
		UserID:        p.UserID,
		Bandwidth:     p.Bandwidth,
		Device:        p.Device,
	}
	return body
}
